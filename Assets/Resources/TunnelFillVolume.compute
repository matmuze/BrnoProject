// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

uniform int _TunnelSphereCount;
uniform int _VolumeSize;

uniform float _Scale;
uniform float _SurfaceSmoothness;

StructuredBuffer<float> _TunnelSphereRadiiBuffer;
StructuredBuffer<float4> _TunnelSpherePositionsBuffer;
RWStructuredBuffer<int> _VoxelBuffer;

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	if(id.x >= _TunnelSphereCount) return;

	float3 position = (_TunnelSpherePositionsBuffer[id.x].xyz * _Scale) + _VolumeSize * 0.5;	

	float radius = _TunnelSphereRadiiBuffer[id.x] * _Scale;
	float radiusSquare = radius * radius;	
	
	int influenceRadius = round(radius * 2);
	
	for(int x = -influenceRadius; x <= influenceRadius; x ++)
	{
		for(int y = -influenceRadius; y <= influenceRadius; y ++)
		{
			for(int z = -influenceRadius; z <= influenceRadius; z ++)
			{	
				int3 local = int3(x,y,z);
				int3 global = position + local;
				
				int idx = global.x + global.y * _VolumeSize + global.z * _VolumeSize * _VolumeSize;
					
				if(any(step(global, float3(-1,-1,-1)))) continue;
				if(any(step(float3(_VolumeSize,_VolumeSize,_VolumeSize), global))) continue;

				float r = dot(local, local);
				float b = _SurfaceSmoothness;
				float a = -log(0.5f/b)/(radiusSquare);
				float gauss_f = b*exp(-(r*a));
				
				int original_value = 0;				
				InterlockedAdd(_VoxelBuffer[idx], gauss_f * 100, original_value);								
			}
		}
	}    
}